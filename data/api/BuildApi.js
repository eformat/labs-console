/**
 * Red Hat Open Innovation Labs Console API
 * Specification for interaction between the Labs Console front-end and back-end.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: rhc-open-innovation-labs@redhat.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function (root, factory) {
  if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(
      require('../ApiClient'),
      require('../model/ErrorModel'),
      require('../model/Body'),
      require('../model/Build')
    );
  }
  else {
    // Browser globals (root is window)
    if (!root.RedHatOpenInnovationLabsConsoleApi) {
      root.RedHatOpenInnovationLabsConsoleApi = {};
    }
    root.RedHatOpenInnovationLabsConsoleApi.BuildApi = factory(
      root.RedHatOpenInnovationLabsConsoleApi.ApiClient,
      root.RedHatOpenInnovationLabsConsoleApi.ErrorModel,
      root.RedHatOpenInnovationLabsConsoleApi.Body,
      root.RedHatOpenInnovationLabsConsoleApi.Build
    );
  }
}(this, (ApiClient, ErrorModel, Body, Build) => {
  /**
   * Build service.
   * @module api/BuildApi
   * @version 0.1.0
   */

  /**
   * Constructs a new BuildApi.
   * @alias module:api/BuildApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  const exports = function (apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

    /**
     * Callback function to receive the result of the addBuild operation.
     * @callback module:api/BuildApi~addBuildCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new build
     *
     * @param {Object} opts Optional parameters
     * @param {module:model/Body} opts.body Build object that needs to be added to the store
     * @param {module:api/BuildApi~addBuildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addBuild = function (opts, callback) {
      opts = opts || {};
      const postBody = opts.body;

      const pathParams = {};
      const queryParams = {};
      const headerParams = {};
      const formParams = {};

      const authNames = [];
      const contentTypes = ['application/json'];
      const accepts = ['application/json'];
      const returnType = Object;

      return this.apiClient.callApi(
        '/builds',
        'POST',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Update an existing build
     *
     * @param {Integer} id Build ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Build} opts.body User object that needs to be updated in the store
     * @param {module:api/BuildApi~updateBuildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateBuild = function (id, opts, callback) {
      opts = opts || {};
      const postBody = opts.body;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling updateBuild";
      }

      const pathParams = {
        id
      };
      const queryParams = {};
      const headerParams = {};
      const formParams = {};

      const authNames = [];
      const contentTypes = ['application/json'];
      const accepts = ['application/json'];
      const returnType = null;

      return this.apiClient.callApi(
        '/builds/{id}',
        'PUT',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };
    /**
     * Deletes a build
     *
     * @param {Integer} id Build id to delete
     * @param {module:api/BuildApi~deleteBuildCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBuild = function (id, callback) {
      const postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling deleteBuild";
      }

      const pathParams = {
        id
      };
      const queryParams = {};
      const headerParams = {};
      const formParams = {};

      const authNames = [];
      const contentTypes = [];
      const accepts = ['application/json'];
      const returnType = null;

      return this.apiClient.callApi(
        '/builds/{id}',
        'DELETE',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the buildsGet operation.
     * @callback module:api/BuildApi~buildsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Build>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
    */

    /**
     * Gets &#x60;Build&#x60; objects.
     * @param {module:api/BuildApi~buildsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Build>}
     */
    this.buildsGet = function (callback) {
      const postBody = null;

      const pathParams = {};
      const queryParams = {};
      const headerParams = {};
      const formParams = {};

      const authNames = [];
      const contentTypes = [];
      const accepts = [];
      const returnType = [Build];

      return this.apiClient.callApi(
        '/builds',
        'GET',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the buildsIdGet operation.
     * @callback module:api/BuildApi~buildsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a &#x60;Build&#x60; object by ID.
     * @param {Integer} id Build ID
     * @param {module:api/BuildApi~buildsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    this.buildsIdGet = function (id, callback) {
      const postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling buildsIdGet";
      }

      const pathParams = {
        id
      };
      const queryParams = {};
      const headerParams = {};
      const formParams = {};

      const authNames = [];
      const contentTypes = [];
      const accepts = [];
      const returnType = Build;

      return this.apiClient.callApi(
        '/builds/{id}',
        'GET',
        pathParams,
        queryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };
  };

  return exports;
}));
